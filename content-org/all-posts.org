#+title: NewsAgent
#+startup: overview
#+hugo_base_dir: ../
#+hugo_auto_set_lastmod: t

* Pages
  :PROPERTIES:
  :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
  :EXPORT_HUGO_SECTION: /
  :EXPORT_HUGO_WEIGHT: auto
  :END:

** About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:END:

*** Me
I'm just an average, everyday software developer with too many things on his mind.
This blog is an attempt to get some of those things out of my mind, and onto a shareable medium.

Oh, and I love *Emacs*, but you'll figure that out as you read through my posts.

I am currently employed at [[https://www.tomtom.com/][ *TomTom* ]] as a Senior Software engineer, a great environment where I've had many opportunities to grow and learn over the years.

*** My Experience
**** TomTom (2018 - present)
I started working as a fresh-out-of-school Software Engineer for TomTom in the autumn of 2018.

Throughout the years I have grown from a green, young developer, into a fully-fledged software engineer, embracing all of the aspects that come with developing *enterprise*, *production-ready* software for a number of projects:

- I have gathered experience and expertise in *Java* and its JVM siblings, along with a slew of high quality, well-known frameworks and libraries such as *Spring (Boot)*, *Hibernate*, *RxJava*, etc. Some Python sprinkled on the side was never an exception either.

- I've refined my operational and infrastructure skills by setting up, deploying and managing everything from a small AWS Lambda, to a *large-scale system of microservices* on both self-managed and cloud-managed *Kubernetes* services.

- Software and tools such as Haschicorp's Terraform and Vault, Grafana, Prometheus, but also many of the managed services from cloud providers such as *Amazon AWS* and *Microsoft Azure* are no strangers to me.

- At different points throughout my career, I have also come in contact with data-intensive applications, requiring me to build knowledge of Data Pipeline solutions like Apache's Airflow, as well as the wonderful world of Spark and its hosted runtime environments such as Databricks.

But most of all, I have learned what it means to be a *team player*. Great mentorship and amazing colleagues have elevated me to where I am today, and through the years I have had the honor to act as the Technical Lead of several amazing teams, applying the knowledge and experience they have thrust upon me.

I still learn everyday, if not more than when I was new; and I want to *keep on learning*.

*** My Projects
I am not extremely active in the Open Source community, for a lack of time, motivation and energy.

This blog is an attempt to give back bits and pieces of knowledge that I have gathered over many years, while also motivating myself to do more in this space.

Some minor things I have(n't) been working on are:
- [[https://github.com/detvdl/newsa.gent][newsa.gent]] -- the source of this blog. Provides a sneak peek into draft/unpublished content, without the need for a Patreon subscription!
- [[https://github.com/detvdl/cue-mode.el][cue-mode.el]] -- a minimal Emacs major mode for the [[https://cuelang.org/][CUE configuration language]]
- [[https://github.com/detvdl/emacs.d][emacs.d]] -- my personal Emacs configuration. Caution: very disorganized and prone to mishaps!

Those, and any other (un)finished projects you can find over at my [[https://github.com/detvdl][GitHub profile]].

* Posts
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :nocomment true
:EXPORT_HUGO_SECTION: posts
:END:
** Index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:END:

** DONE Taming eshell with shackle.el, popper & el-patch                                  :@emacs:
CLOSED: [2022-05-01 Sun 16:37]
:PROPERTIES:
:EXPORT_FILE_NAME: taming-eshell-with-shackle-el-popper-&-el-patch
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :toc true
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2022-05-01 Sun 16:37]
:END:
A short while ago, I decided to adopt eshell into my daily work routine as a quick & easy-to-access shell from within my favourite editor.
But I couldn't stand some of its default behaviour. Let's talk about it!
#+hugo: more
*** Emacs window management
For quite some time now, I had been unhappy with Emacs' default management of temporary/ephemeral buffers and windows.

*Example*: Something goes wrong, a =*Backtrace*= buffer pops up in some window, you close it with ~q~ and *boom*, your window setup is broken yet again.

That's a very tame and relatable example, but there are some packages that have much more... /intrusive/ behaviour.

*Eshell*, for example, just takes over whatever window you are currently in. Entirely.
That's not very friendly, nor is it especially useful for a shell, which you most likely want:
- In a separate window, to monitor certain running processes
- In a hidden buffer, within a key-chord's reach, to execute a quick command or 2

Looking into packages to manage this type of buffer and window more carefully lead me to the [[https://github.com/karthink/popper][popper]] package.

*** Introducing Popper.el
Popper.el is an amazing package, with a fairly simple premise:
#+begin_quote
If it tends to pop up out of nowhere, treat it as a pop-up buffer.
#+end_quote

These "ephemeral" buffers get a window of their own, whose visibility can be toggled on-and-off at your command.

Its setup is simple enough, and in my ~init.el~ I have the following configured:
#+begin_src emacs-lisp :hl_lines 8-34
(use-package popper
  :straight t
  :after shackle
  :bind (("C-`" . popper-toggle-latest)
         ("M-`" . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :config
  (setq popper-group-function #'popper-group-by-projectile
        popper-display-control nil
        popper-reference-buffers
        '(occur-mode
          grep-mode
          locate-mode
          embark-collect-mode
          deadgrep-mode
          "^\\*deadgrep"
          help-mode
          compilation-mode
          ("^\\*Compile-Log\\*$" . hide)
          backtrace-mode
          "^\\*Backtrace\\*"
          "^\\*eshell"
          ("^\\*Warnings\\*$" . hide)
          "^\\*Messages\\*$"
          "^\\*Apropos"
          "^\\*eldoc\\*"
          "^\\*TeX errors\\*"
          "^\\*ielm\\*"
          "^\\*TeX Help\\*"
          "\\*Shell Command Output\\*"
          ("\\*Async Shell Command\\*" . hide)
          "\\*Completions\\*"
          "[Oo]utput\\*$"
          "^magit*"))
  (popper-mode +1)
  (popper-echo-mode +1))
#+end_src

As you can tell from the highlighted lines, you *do* need to configure for yourself which buffers are treated as pop-ups.
But that's a plus, since popper does not make any assumptions about *what* defines a pop-up buffer. That's all up to you!

The special buffers now get a nice visible ~POP~ identifier in the leftmost corner of the modeline; it looks sort of like this:

#+DOWNLOADED: file:/Users/detlevvandaele/Desktop/Screenshot 2022-05-01 at 14.54.19.png @ 2022-05-01 14:55:14
[[file:../static/images/Posts/2022-05-01_14-55-14_Screenshot 2022-05-01 at 14.54.19.png]]

As stated in the [[https://github.com/karthink/popper#managing-popup-placement][popper README]] itself, however, you will need additional configuration to manage the *placement* of these popups.

By default, it uses, well, the default window placement defined by the creator of the buffer, and if that's non-existent, it pops up at the bottom of your active frame.

You can set a different default behaviour for popper by setting
~(setq popper-display-control t)~ and defining your own placement function similar to how ~popper-select-popup-at-bottom~ is defined.

For more granular control over each window's placement, they recommend [[https://depp.brause.cc/shackle/][shackle.el]], and so that is what I ended up using.

*** Shackling your windows in-place

Shackle is very similar to popper in configuration, in that it is
1. Very simple and straightforward, and
2. You just specify a list of regexps, buffer names or modes to match
and it does its magic. Just see for yourself:

#+begin_src emacs-lisp
(use-package shackle
  :straight t
  :demand t
  :config
  (setq shackle-default-rule '(:select t)
        shackle-rules
        '(;; Below
          (compilation-mode
           :noselect t :align below :size 0.33)
          ("*Buffer List*"
           :select t :align below :size 0.33)
          ("*Async Shell Command*"
           :noselect t :align below :size 0.20)
          ("\\(?:[Oo]utput\\)\\*"
           :regexp t :noselect t :align below :size 0.33)
          ("\\*\\(?:Warnings\\|Compile-Log\\|Messages\\|Tex Help\\|TeX errors\\)\\*"
           :regexp t :noselect t :align below :size 0.33)
          (help-mode
           :select t :align below :size 0.33)
          ("*Backtrace*"
           :noselect t :align below :size 0.33)
          (magit-status-mode
           :select t :align below :size 0.66)
          ("magit-*"
           :regexp t :align below :size 0.33)
          ("^\\*deadgrep"
           :regexp t :select t :align below :size 0.33)
          ("^\\*eshell"
           :regexp t :select t :align below :size 0.20)
          ;; Right
          ("\\*Apropos"
           :regexp t :select t :align right :size 0.45)
          )
        )
  (shackle-mode +1))

#+end_src

With this combination in hand, I managed to tackle almost every issue I had with buffer- and window-placement.

*Almost* every single one...except for the main topic of this post: *eshell*.

*** The good, the bad, and the eshell

As is mentioned in the /Internals/ section of the [[https://depp.brause.cc/shackle/][shackle.el README]]:
#+begin_quote
...
Emacs packages that neither use the display-buffer function directly nor indirectly won't be influenced by shackle.
#+end_quote

And this is problematic for us. If we look at the source code for eshell, we see the following:
#+begin_src emacs-lisp :hl_lines 13
(defun eshell (&optional arg)
  (interactive "P")
  (cl-assert eshell-buffer-name)
  (let ((buf (cond ((numberp arg)
		            (get-buffer-create (format "%s<%d>"
					                           eshell-buffer-name
					                           arg)))
		           (arg
		            (generate-new-buffer eshell-buffer-name))
		           (t
		            (get-buffer-create eshell-buffer-name)))))
    (cl-assert (and buf (buffer-live-p buf)))
    (pop-to-buffer-same-window buf)
    (unless (derived-mode-p 'eshell-mode)
      (eshell-mode))
    buf))

#+end_src

That highlighted line, ~(pop-to-buffer-same-window buf)~ is the bane of our existence at this point.
No matter what rules you add to ~display-buffer-alist~, eshell won't care. It will force its buffer into your current window, regardless of your demands.

*So how do we fix this?*
Surely we won't wait for an upstream patch to be applied, especially since the [[https://github.com/emacs-mirror/emacs/blob/5a223c7f2ef4c31abbd46367b6ea83cd19d30aa7/etc/NEWS#L842-L843][Emacs 28.1 release notes]] state the following:
#+begin_quote
'project-shell' and 'shell' now use 'pop-to-buffer-same-window'.
This is to keep the same behavior as Eshell.
#+end_quote

That's where [[https://github.com/raxod502/el-patch][el-patch]] comes in!

*** Patch, patch, patch to your heart's content

Without going too much in-depth, el-patch is a wonderful package once you start wanting to hack on internal packages, or don't want to fork an entire project for a minor code-change.

Its documentation is extensive, and you can find plenty examples of how to use it in the wild.

For this post, we'll focus on the following functionalities:
1. Use ~display-buffer~ to manage the eshell-buffer
2. Allow specifying a custom buffer-name suffix

The latter is just to "namespace" our eshell buffers a bit more clearly than just ~eshell<1>~, ~eshell<2>~, and so on.

#+begin_src emacs-lisp :hl_lines 20-24,28-33
(use-package el-patch)

(eval-when-compile
  (require 'el-patch))

(use-package esh-mode
  :straight (:type built-in)
  :config/el-patch
  (defcustom eshell-buffer-name "*eshell*"
    :type 'string
    :group 'eshell)
  (defun eshell (&optional arg)
    (interactive "P")
    (cl-assert eshell-buffer-name)
    (let ((buf (cond ((numberp arg)
		              (get-buffer-create (format "%s<%d>"
					                             eshell-buffer-name
					                             arg)))
		             (arg
		              (generate-new-buffer (el-patch-swap
                                             eshell-buffer-name
                                             (format "%s[%s]"
                                                     eshell-buffer-name
                                                     arg))))
		             (t
		              (get-buffer-create eshell-buffer-name)))))
      (cl-assert (and buf (buffer-live-p buf)))
      (el-patch-swap (pop-to-buffer-same-window buf)
                     (display-buffer buf 'display-buffer-pop-up-window))
      (el-patch-wrap 1 0
        (with-current-buffer buf
          (unless (derived-mode-p 'eshell-mode)
            (eshell-mode))))
      buf))
  :config
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
    current buffer's file. The eshell is renamed to match that
    directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                     default-directory))
           (name   (car (last (split-string parent "/" t)))))
      (eshell name)))
  (global-set-key (kbd "C-!") 'eshell-here))

#+end_src

*** Conclusion

There you  go, we've el-patch'ed the original ~eshell~ command so that it conforms to the ~(display-buffer)~ requirement of shackle.el, and in the process added some minor QoL changes.

Now, whenever you are in a project, you can start up a fresh, "project-local" instance of eshell with ~C-!~.

Whenever you want it out-of-sight, or back in-sight, you can just toggle it or cycle to it with popper's shortcuts (~C-`~ and ~M-`~).

The end result, depending on your configuration settings for shackle.el, might look something like this:

#+DOWNLOADED: file:/Users/detlevvandaele/Desktop/Screenshot 2022-05-01 at 20.47.47.png @ 2022-05-01 20:48:46
[[file:../static/images/Posts/2022-05-01_20-48-46_Screenshot 2022-05-01 at 20.47.47.png]]


** TODO Pear-programming, or: How I Learned Not To Compare Apples & Oranges               :@engineering:@agile:
:PROPERTIES:
:EXPORT_FILE_NAME: pear-programming-or-how-an-apple-a-day-won-t-keep-the-deadlines-away
:END:
<TBD>
** TODO Leading Change, and following suit(s)
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: leading-change-and-following-suit-s
:EXPORT_FILE_NAME: index
:END:
** TODO The Mythical Man-Month, a legendary beast
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: the-mythical-man-month-a-legendary-beast
:EXPORT_FILE_NAME: index
:END:

* Footnotes
* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (setq fill-column 120)
# eval: (setq-local org-download-image-dir "../static/images")
# End:
